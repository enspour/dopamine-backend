version: "3.9"
services:
  gateway:
    image: nginx:1.23.2-alpine
    container_name: dopamine-gateway
    environment:
      - CLIENT=client:3000
      - AUTH_SERVICE=auth-service:3000
      - USERS_SERVICE=users-service:3000
      - POSTS_SERVICE=posts-service:3000
      - STORAGE_SERVICE=storage-service:3000
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./gateway/templates:/etc/nginx/templates
    ports:
      - 8080:8080
    depends_on:
      - auth-service
      - users-service
      - posts-service
      - storage-service

  # AUTH SERVICE
  auth-service:
    build:
      dockerfile: Dockerfile
      context: ./microservices/auth-service
      target: development
    container_name: dopamine-auth-service
    command: bash -c "cd /usr/src/app && yarn run start:dev"
    environment:
      - ENV=development
      - PORT=3000
      - PG_HOST=postgres-database
      - PG_PORT=5432
      - PG_USERNAME=postgres
      - PG_PASSWORD=secret
      - PG_DATABASE=dopamine_auth
      - REDIS_HOST=auth-service-redis
      - REDIS_USERNAME=default
      - REDIS_PASSWORD=secret
      - REDIS_PORT=6379
      - EMAIL_QUEUE_URLS=amqp://rabbitmq-queue:5672
      - EMAIL_QUEUE_NAME=email_queue
      - AUTH_QUEUE_URLS=kafka-queue:9092
      - AUTH_QUEUE_NAME=auth_queue
      - USERS_QUEUE_URLS=kafka-queue:9092
      - USERS_QUEUE_NAME=users_queue
    volumes:
      - ./microservices/auth-service:/usr/src/app
    depends_on:
      postgres-database:
        condition: service_healthy
      auth-service-redis:
        condition: service_healthy
      rabbitmq-queue:
        condition: service_healthy
      kafka-queue:
        condition: service_healthy
    restart: always

  auth-service-redis:
    image: redis:7.0.11-alpine
    container_name: dopamine-auth-service-redis
    command: redis-server --requirepass secret
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a secret ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # EMAIL SERVICE
  email-service:
    build:
      dockerfile: Dockerfile
      context: ./microservices/email-service
      target: development
    container_name: dopamine-email-service
    command: bash -c "cd /usr/src/app && yarn run start:dev"
    environment:
      - ENV=development
      - EMAIL_QUEUE_URLS=amqp://rabbitmq-queue:5672
    volumes:
      - ./microservices/email-service:/usr/src/app
    depends_on:
      rabbitmq-queue:
        condition: service_healthy
    restart: always
    
  # USERS SERVICE
  users-service:
    build:
      dockerfile: Dockerfile
      context: ./microservices/users-service
      target: development
    container_name: dopamine-users-service
    command: bash -c "cd /usr/src/app && yarn run start:dev"
    volumes:
      - ./microservices/users-service:/usr/src/app
    environment:
      - ENV=development
      - PORT=3000
      - PG_HOST=postgres-database
      - PG_PORT=5432
      - PG_USERNAME=postgres
      - PG_PASSWORD=secret
      - PG_DATABASE=dopamine_users
      - AUTH_QUEUE_URLS=kafka-queue:9092
      - AUTH_QUEUE_NAME=auth_queue
      - USERS_QUEUE_URLS=kafka-queue:9092
      - USERS_QUEUE_NAME=users_queue
    depends_on:
      postgres-database:
        condition: service_healthy
      kafka-queue:
        condition: service_healthy
    restart: always

  # POSTS SERVICE
  posts-service:
    build:
      dockerfile: Dockerfile
      context: ./microservices/posts-service
      target: development
    container_name: dopamine-posts-service
    command: bash -c "cd /usr/src/app && yarn run start:dev"
    volumes:
      - ./microservices/posts-service:/usr/src/app
    environment:
      - ENV=development
      - PORT=3000
      - MONGO_HOST=mongo-database
      - MONGO_PORT=27017
      - MONGO_USER=mongodb
      - MONGO_PASS=secret
      - MONGO_DB=dopamine_posts
      - AUTH_QUEUE_URLS=kafka-queue:9092
      - AUTH_QUEUE_NAME=auth_queue
      - USERS_QUEUE_URLS=kafka-queue:9092
      - USERS_QUEUE_NAME=users_queue
      - STORAGE_QUEUE_URLS=kafka-queue:9092
      - STORAGE_QUEUE_NAME=storage_queue
    depends_on:
      mongo-database:
        condition: service_healthy
      kafka-queue:
        condition: service_healthy
    restart: always

  # STORAGE SERVICE
  storage-service:
    build:
      dockerfile: Dockerfile
      context: ./microservices/storage-service
      target: development
    container_name: dopamine-storage-service
    command: bash -c "cd /usr/src/app && yarn run start:dev"
    volumes:
      - ./microservices/storage-service:/usr/src/app
    environment:
      - ENV=development
      - PORT=3000
      - MONGO_HOST=mongo-database
      - MONGO_PORT=27017
      - MONGO_USER=mongodb
      - MONGO_PASS=secret
      - MONGO_DB=dopamine_storage
      - MINIO_HOST=storage-service-minio
      - MINIO_PORT=9000
      - MINIO_ROOT_USER=dopamine
      - MINIO_ROOT_PASSWORD=secret_password
      - STORAGE_QUEUE_URLS=kafka-queue:9092
      - STORAGE_QUEUE_NAME=storage_queue
      - AUTH_QUEUE_URLS=kafka-queue:9092
      - AUTH_QUEUE_NAME=auth_queue
    depends_on:
      mongo-database:
        condition: service_healthy
      storage-service-minio:
        condition: service_healthy
    restart: always
    
  storage-service-minio:
    image: minio/minio:RELEASE.2023-06-29T05-12-28Z.fips
    container_name: dopamine-storage-service-minio
    command: server /data
    volumes:
      - ./data/storage-service/minio:/data
    environment:
      - MINIO_ROOT_USER=dopamine
      - MINIO_ROOT_PASSWORD=secret_password
    healthcheck:
      test: ["CMD-SHELL", "curl -I http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # DATABASES
  postgres-database:
    image: postgres:14.5-alpine
    container_name: dopamine-postgres-database
    environment:
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=secret
    volumes:
      - ./microservices/auth-service/databases/postgres/init/create-db.sql:/docker-entrypoint-initdb.d/auth-service-create-db.sql
      - ./microservices/users-service/databases/postgres/init/create-db.sql:/docker-entrypoint-initdb.d/users-service-create-db.sql
      - ./data/postgressql:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-database:
    image: mongo:6.0-jammy
    container_name: dopamine-mongo-database
    volumes:
      - ./data/mongodb:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongodb
      - MONGO_INITDB_ROOT_PASSWORD=secret
      - MONGO_INITDB_DATABASE=dopamine_posts,dopamine_storage
    healthcheck:
      test: ["CMD-SHELL", "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/dopamine_posts --quiet"]
      interval: 10s
      timeout: 5s
      retries: 5

  # QUEUES
  rabbitmq-queue: 
    image: rabbitmq:3.12.0-alpine
    container_name: dopamine-rabbitmq-queue
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-queue:
    image: bitnami/kafka:3.5-debian-11
    container_name: dopamine-kafka-queue
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5


